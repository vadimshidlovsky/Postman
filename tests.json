HW_2 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.


2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
pm.test("Проверить, что в body приходит правильный string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});


http://162.55.220.72:5005/user_info_3
1. Отправить запрос.


2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let jsonData = pm.response.json()

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Проверить, что name в ответе равно name s request", function () {
    pm.expect(jsonData.name).to.eql("Vadim");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Проверить, что age в ответе равно age s request", function () {
    pm.expect(jsonData.age).to.eql("26");
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Проверить, что salary в ответе равно salary s request", function () {
    pm.expect(jsonData.salary).to.eql(550);
});

7. Спарсить request.
let req = request.data

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test(" Проверить, что name в ответе равно name s request", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});


9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Проверить, что age в ответе равно age s request", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Проверить, что salary в ответе равно salary s request", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});

11. Вывести в консоль параметр family из response.
console.log (jsonData.family);

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Проверить что u_salary_1_5_year в ответе равно salary*4 ", function () {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.


2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let jsonData=pm.response.json()

4. Спарсить request.
let req=pm.request.url.query.all();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test('Проверить, что name в ответе равно name s request',function(){
    pm.expect(jsonData.name).to.eql(req[0].value)
})

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Проверить, что age в ответе равно age s request", function () {
    pm.expect(jsonData.age).to.eql(req[1].value);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Проверить, что salary в ответе равно salary s request ", function () {
    pm.expect(jsonData.salary).to.eql(+req[2].value);
});

8. Вывести в консоль параметр family из response.
console.log(jsonData.family)

9. Проверить, что у параметра dog есть параметры name.
pm.test("Проверить, что у параметра dog есть параметры name.",function(){
    pm.expect(jsonData.family.pets.dog).to.have.property('name')
})

10. Проверить, что у параметра dog есть параметры age.
pm.test("Проверить, что у параметра dog есть параметры age.",function(){
    pm.expect(jsonData.family.pets.dog).to.have.property('age')
})

11. Проверить, что параметр name имеет значение Luky.
pm.test("Проверить, что параметр name имеет значение Luky",function(){
    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky')
})

12. Проверить, что параметр age имеет значение 4.
pm.test("Проверить, что параметр age имеет значение 4",function(){
    pm.expect(jsonData.family.pets.dog.age).to.eql(4)
})

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.


2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let jsonData = pm.response.json

4. Спарсить request.
let req=pm.request.url.query.all()
let req1=pm.request.url.query.toObject()
console.log(req)
console.log(req1)

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test('proverka5',function(){
    pm.expect(jsonData.name).to.eql(req1.name)
})

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test('Проверить, что age в ответе равно age из request',function(){
    pm.expect(jsonData.age).to.eql(+req1.age)
})

7. Вывести в консоль параметр salary из request.
console.log(req1.salary)

8. Вывести в консоль параметр salary из response.
console.log(jsonData.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(jsonData.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Проверить, что 0-й элемент параметра salary равен salary из request", function () {
    pm.expect(jsonData.salary[0]).to.eql(+req1.salary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Проверить, что 1-й элемент параметра salary равен salary*2 из request", function () {
    pm.expect(+jsonData.salary[1]).to.eql(req1.salary*2);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Проверить, что 2-й элемент параметра salary равен salary*3 из request", function () {
    pm.expect(+jsonData.salary[2]).to.eql(req1.salary*3);
});

15. Передать в окружение переменную name
pm.environment.set("name", req1.name);

16. Передать в окружение переменную age
pm.environment.set("age", req1.age);

17. Передать в окружение переменную salary
pm.environment.set("salary", req1.salary);

18. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (i in jsonData.salary){
    console.log(jsonData.salary[i])
}

